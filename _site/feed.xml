<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-02T21:02:08-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ben Pierce</title><subtitle>CS Student at CWRU</subtitle><entry><title type="html">Photos from Cape Town, South Africa</title><link href="http://localhost:4000/cape-town/" rel="alternate" type="text/html" title="Photos from Cape Town, South Africa" /><published>2019-06-28T00:00:00-04:00</published><updated>2019-06-28T00:00:00-04:00</updated><id>http://localhost:4000/cape-town</id><content type="html" xml:base="http://localhost:4000/cape-town/">&lt;p&gt;A little over a year ago, I studied abroad in Cape Town, South Africa. I thought some of the photos I took
were pretty groovy, so I’m embedding them here as well.&lt;/p&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/publicalbum@latest/dist/pa-embed-player.min.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;div class=&quot;pa-embed-player&quot; style=&quot;width:100%; height:480px; display:none;&quot; data-link=&quot;https://photos.app.goo.gl/sXRYWBPz6gNMKdKY6&quot; data-title=&quot;ENGR 225B Cape Town&quot; data-description=&quot;90 new photos · Album by Ben Pierce&quot;&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/hmGwI8WtV1VgX2AQssh7TWM09YeIJU9tfH39GNhRCMuBwINelVCfXk1S1O1W9jHJwgyijoi-BLT_RA53FWtAHs34kZ4Vp62gsWVN_zQVcrzNg3B5mgrqu1nMgvnbO18pv3v50EksRw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/Xfp2m8X6uljx3KvsB9wmOyGHK7XE8jFuPGYTGjW6d9rtBl2FwZiebf6FIqL4b5daPPNeOASh_TUoixUYidKcKsI0QK9YSgyTwYpghXy50p-6FUuM3yAdVXLuWkrZYRExs1EPAs-kGA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/YK0YPVzqDbiT4zNCwHhzhtaSZFWOJM0U8op4eTbWICa4F2Y2B32lkWzntdPVyB5A1-tz-zHE_SYNaX7cb77GUv9-bgkL_nqnFqsjsWF2twNP7ZB5SLRESghlTo8z4UapUbfLrpqCog=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/bBGQd3DN1UDBlfMzJAeyMxYAW5savzxqpisaEE-bCR9ozunT1my10SVhPcLp4Ew8B3bBNvCDXhruWvs8Oqz902yuV-MHaGN7bWGqh11ypUO_MPaA5lPbduk29btCeqe2U6e94eK46A=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/RxtIjEcBT-B4N8IBH1hDzGsYJFJG1TiVPjqWU9A5AC_yCYhid8OEejijQOJbYmH3RX6Dr6YmZ_7QOeNI64bo-SdhCWbBtzCWwz7lwM3Lm8E8O2Kvzu4vDfY3Bfczdx3kntLf1uuE0Q=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/_mg2_K-RBjYyLMLNW2ndwHNIT0ua_ChifKMi8wsXu2t7u2sn-JiMHjLe0HVQu01aEymk3Kq2wSYgaqm_pRgKBsJfkzIUjp54oNRssyYevkdaYndtiKI_N_eoLzCwlrAo3JLVg6GARA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/ZW6zsSeb7mHqqKeLe5cE8XHrVuOUBUdBFMYTZa7cAq3u5uzJrIamjbirkODFjoF8u9ugWVlrZZd0NPITrKtK1RRUCDzu2iYYdoK8JAfGuDBWJSpXeZsXp6vwDrfSSG1Nvj2vmm-T1A=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/NA-728kbuLcjvazOxQjYDF1gHZkDO6jkCxIcoCHOl6TwUhEwv4MXIpSKju1OUEWoZ9Ge2O7agXH8IGp7yAO_2HbMvkxo0dI9pZ2Q4OgOEk7-PuveGZQjpsGnz63WKkaH_CWMsGqtWg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/MZmnBvPc7feDf0ARY3Mm-lwBaA8wPu68LcFaBDbChh_KLxHA9RevliUkmgR8DuH4x0IavLZZj32l21RNS-S8hgapaqu2oMgUmPFbozJlZYotENIYRAklpsaDonSvHRV9mFInngS5cQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/Yg0oU720cZnT5glOucH9RBtsDN6DnWD5t4gfB6ZhQd_FBhM4llheERN4TGsopcubzg7QaRzokU1GmEtUoz7koimZLx1-kqb4eO9jo9l_Q6dyK6zb9BNYbDJTGeS0_BkG9QNvoK9ZJA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/AOmmI3JCvpU5e9DvQToj8A5lqOtBdR_kcBJniGeDGSyW1yX_t-WnHo8EhdYMUEsY_SS_SMw8lfkvshwW3pB6XFEbeSex_84M_l_AxdecHhuzkLv76ocTCvu_1rYGCbgiK7KNqom8DA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/eJ8wWBcRdDkNLhMIE3YBapqkRJOZksLM1ScsIHNmqrfYCav0eCqlLdbtXosUc1tq4tuTg6A-LlMWPILvCndZHbmJ4Qw5aTWf8vMcbnc_cEHskYQIqm05-R7LIbSBTOwtK8S91pZ4JQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/vDp0mMyAEXsbYSA-gWkksXFvI5NXqFWJ44SI9Vev1jmZjjmyqxG_WHHciCS9bmHDExI-qFlEfHQuvUwhHiRVeEIw4OPz6PV2BqcrHpI3MfyW-eMuK-mjcRfT3RUXMeynjoPSlf9yJQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/xS1XTSe5I2PB3JaF725tiBJA6J_3NT_372Uk4NamipVvdet1ozpd3P4etMKGRieKX3N7lLfXNLY7MqJjInNXNqkx6A7a929vve1JAVIlGLbuJyPo36RdTMW9vB4KEkS5dHbL-PCPkA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/qFuwx6IEZzTpv7Gp6iPuxyol2WAQ5oWV4MFB5KK7-6JZ7SOZN-lQ4pPSrR0D4oSVbC9VuXXggKv6nvILTJU3vmePn0EvUJ_KrfFf0IWiYjsWMKZoUOayGLs0B_ark7zran3LfyAY8w=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/FbG4RzqubqrWbposlK5-415RVQtON3ZoF3HUAOMMlXEfCEpPpv_RIyxC5mUMz4pfLxYAyZUBoibU82aJwTuHtlCCU4-WvdAE_3yg5OeX8Kndg6cTmLnlv3BaYJc_lpA69Lp3_iSKMg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/0OUjfpEgm7zd7tocemD0_fF2rISHhaCDm9BBAUo595j3dj7P0rjWi_0bRUod0yY1_GVAtDsZllYb9nkcyMyA3m-4GwgsPdyZXvyVVMPqGlPem391l5Uji0mObczM2amLvc9XahQYZg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/Bnp13WDSJv-3eRyMmOTxjVVQLUmj4Nu9pq0viNmtLI8N3Mq9LatiDENf2oJhVyR8lQBhUFxc-i9gD-VJovdtrMfvhWy7he4U7tbxpJMABXncCwlPVBZHXWrVeyg7aniu_8p-EY2mZA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/IxrLl--iecVoSVkquq8g0QHHzuvoocdJ3f3Ynxi4AWDLmM_KkwKl-vb9RSP0amyfQmlHfHdV0nXaA3vcL75YLZT_SR7_DVT05FCb2vN82bZn6jCKMcmHz8K7oFdryB8O7WHmCo0WSg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/FW_NE2ViMtwNbkqH0Pftmv-RU0G143RMrrp0uUBLrmzuDe9w7SC2bEmz13fQ0-k7quSsb3ZvFGbjtShDW7TPaUKiZzvzZJVjfodKv1J4HX4U60b8CW7x4EBX0pz1s75d7QbNZjgEqg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/VGz2-WlqEmqJUf7iB1OtB5aHYAyjkA2sxO8es5SN-otpl30qdn-vsDzTu-m8SGy_CVRY6BlDtSjhORl2FHpXY09V83MjO41TEBFqti_vinSfP70qNxs26sU1j2vQI5Vim5Jf9lg-vQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/svKDu5gyMyLGvJOszLwS4UQXi8HqJ6NkCPQ9_hc1fQ5m5rqvUMEfYzPtRuua4kXwbNiXJIhzTCHqvlyhr-VXy8NIRFy6oUCccoIdCXjkJC6nO7Q80XtJDPkhXmwwUBqp1II_6MJb8g=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/SvQJ1t0yx02mBlHw6vhgptQCwz31ZwYevgkI97MRo93X2ruG_Rn5SDkZBBbSKZ0ZQg46PvKlcZ6fCUObVCFe4LfePwQj3_sQTX7MeCeF9fA7DBCRd--TLgLMeZ3QMY_tMh5P1z4Zsw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/ZyHMkk0yDZJCB0fMHsVw7aMlJmFeuj5Ti3duLEHGP4nD7lNGbRiPwongTaW2BDauJSwd9LByYi6R6mi_cpZc5xEGbNqsOa-A2O0XtI4BlaT8OwLHuZncT8Sut909EP4lQJIxJKKbZA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/v-SJFfOpoWb2SxZ223J4Ego4PApo2nEMiq5E724N2IRLOHgspaVkzVJMxhM8B0Y441k9x4kj9EFkMcpfcgyfMd8R8MNxDVTuY6lIalPYV6RZFiJlTDmgnnn5f04pTU8nNdUUf8Mwrw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/PqtX2w8XucKuksvw3cyh2oL0MWyb6EL2XU1JWUNHJ7OiHtaO7vkvoIbptNyDZ-H1h0ZeRR_U4UkKf6iNVYHsiED_4qXYKNvKL9gk2RmTHNwIcXFhXLKdfYEUVmE5q1y3nd3Zc8Aoew=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/THviZBZt-Z573hdPQYNZnT72ZiXQFEXXN6N7IMf0w1mQg5jcopugLDFVMKexMLXRw3SmgGx0HMExqrnmP-ASyfhl94QZPZKiQhemf3-jdP2dOeUN_UifP47cZ6jY6T_GIVMAgB-znA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/cEy3oIk8jK_42Wmjz6kvV3d7UN5ox3CFNc9azP6HOQ4qS_Dld50Q_QWDfaBOQxgQEodF9AzKqWbxDLq0wiRgVXqDrOjavS69heAKRFvFnVHLlI5dh_YtpDFAt9u0EHYXgHXe3M2uHQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/0h9vJxL_FfM6-SLzFO8Fd9pwoZsRw_mrWy8ZnwXV0KyeT1-CTlgJTfneZk0xjd4js3toVTxOQsge_OEl0HGH2Aog8glnds29xEVAfXVyvu_HEqSZsoyDWnA1dQgmfxWLYJU0cK4haw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/4VPGh2hckniRyav_TGNMCBZfwJ3zvFQzdG7vC27dNlF349eFtOZwd997-CalYzY1ro_zOSw1II194y9yCX4RX82cpxMr6mT1tLAaOftc7X-aksW5ORci2KcKwQeXcXVKR7QWdFLGmQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/yYG2GL6DbLdZsG-SzH5zdaa3LJPODTwH6kvCsyFIyJ7KewgJY7bawZJWdkHNrRJWRWqXK05kvKNaA3g604wi-9_zrPoTnj-DgELJaQS25DsSmtHbssTo4DxditHBdT53TisY1ew-Sw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/PBlkBZ8XC7XRi7lusS5ZgwdBP33UVpa1CRvmBnTxDMgoY_dZ9US8HY889eZlTAb29MkC5UDnpHABWQVlSm4RRv9yW7nCeBe9ITsZbb6P5D80zB--i3sro7hroqyDeYhj_qdsRXkfaw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/_cIEQEN5deG7KOMsLH23OljOcXm6-76gt5ctoDPrWUveuW9PwNNzatSVhtIofALf2vdSd1RI2dCO3uQGLrGCNnwqyIVlUjkAEJVi-9hOytKyG_ZvEDfZSyyBxKKeucxWBStuHs3S1g=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/TvITIXkvmBGU8ioSJSZnwBS5YU9BAun5Zbf9snZ9gF7qYw5bIz6ftjQX5qptW6ySJuLsLF9CrDJdwmDMtfOcGGZ7DmlnR2ZEFCbwn7oO5jX4CY7J0QHedL08e0GhxLkxpu43YwsRsg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/p6FlAzgAcgyHQofU0i1oe39QvhgWyeZexgnP91np1_QAC3rK5FPvPvaXZ4mbyqfJtt5_dbvyn-hz1oBdinBZa8JBIDtkzQXfPdttSE_0B_LzUk8a7SJdbS6LgsvAyTqzfmU4Uea48Q=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/nlmqlm1r6LblD02vCHUjqV4YawEaYxSk9hvHrdP05sbaYW6oL5WjQVxoXz79sTg4jY6QRFoJatkJPU0swis3XxBMWN1xYKZRSR3WyocBsgTWCErB83isYoBimIpi_GvA9RGR3lqbbg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/09b8jn7eM1LPd5evHxZFrVr-AA0Jhnzz-78xPlvgyHrVdoP-VjC4Tb84MWCz_774_aURnTkBrNrIQ10ekw9lW0nQkjdC9ecuZb8zCXXJTITa3Hx4_Yjib1MPe52IsLjeWZF8xpNwYw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/6cehNNvmMg0VHcV8ZrAYR7vrmcnRQAnlBYuByp9j0iE1kG3HmVHh6hiSHSiuCLXl3nrmaY7Zq3DmTmV5CJ8OxJ2lgcUiHqlCs1uY2xqiDqgJMGGRIfBLNPqszPi1JdN97bgbfDD1Dw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/5FL-0laGMkUDQQYTlR84GbX6RS0oZhJ4rLPtynU0z9BJnEpqk2Ccv5t6ym55uc7Nzi8p7NryEXcRb3NqTMUUFL_YhY8MgQC8NktVGVW1GMP1rpFPnDL0a86jExv-DRvLTAkUNHkbSQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/YHTaWUD_WzNv3sWTc4VSIyYlbTk-Oe-UInjtPtSIqf9fUMaC-ZSEknhgfRVRM0D5utkgdT0OLQ0eHt8r31HNvwC3OvstSAVcNsRU5S7kvS-1UyLTqwdWKVDNrZ82kmrxOYHb5ElQig=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/dRqoOCiqNBHBWlAvlLm9FkQX8BAocuTXj9MhpT-2w5aIZ7JDCVjS4YMlySUhLcKFpiE0jSZVX_UAfMGbCAHbhxtYzqGaFY8BTa3rGO9RfdI_xevOKq-8e472x6CvqbCC0b_84atJ_Q=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/MzGfzs_QloIt_kjN8qduSD0wU6A_e2LFk0Hvy1EC1v5V6ycwfdHR8G7Ov_jL3bst_c8Tc7OOKDaNJDA8QqLBcOr-l_MuRLGuup9virKHamY36FKtDAPjH1G0YEA_0wKZAycfkTqePw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/FfNwcDQwXPRgodEv9bSa5skHO4-E6nZsZtimXln2O11J8i90q2rUAY0voiY6fHwDGL6C_72uN4Lqtr6t9FtXB8jYt1MK5L0EAPK9fbkUVOUpujCbt4NFFep_5E76ttiQyaGNCXuPcw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/4rneEbDHF5bvGa2yakDJXaB8EriCmeJmJMX27PlU0anCUdjHJwEyAD09dnExzMJRyQ5e-s49Nb28OohR_BwHakwYkUUNz7-gW0fEH4KdhD5RvAcxp5Udv46HGRoClH7qsdUoWugAxg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/I7gTxSbIM1WlyBF7ZbDcPh_YiLFb6xMgrCz7gizarjbiNdRW59B1sw0cgXghTZ5kdc9IpgBWwTiZOEzzqW9peOIdifcE7wqWfkDXBIpLyKZvGaWFvReh_ZZcp-67X0g5mrYYXbN1-g=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/xoi7b0qZt-TgTpMRzUFNXiAHwukTWXSnT91VMvgs1A2dinBtLcUSuxM7ps4aJHn9cADfIzk22j8WYoGGGixgo9YIr2o49jtCsz3YsfjS5sX3k1Q8J9gL9SFYxtgzNur3LjEXMCV1uw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/TVbNH-IQybjeiJOQvy7339KFk4KDgx59wt8J9NqbqRJ_Rtjguu9kdopjDkEuNfHO08e4s4I5G_TKiHh4L10EkJeQNnPQk8FlWkM-5XaYvejk2J_lXtorfBZi0eraRPWSGUNu_CALVA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/KbwTPLLV7q3GaiXPYfSt3kDNRrv201IhRQg2QAaem6QVMZbNCTwVpjgihr9hyaJa0MvSYjD5bMEPIYby63lPYQ1j44tX7jrSs0-6I7e3EBYWBO81RZ6ffPfU5fztaXu6xxV73XPKAg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/NWcGh_ORChlsKXq8M5Kcj5uhZHqhk6oYxBoC63WtrhniYxb3b_YII-Qm8e8ooP5YPWD7HDbzqYnJInbwo0cxRh0LDwgdnigPCPhKZKXaSZWw5XkSeZluVJmwZK8KJLrM6u0iznCS2Q=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/L7IdhKuix5pgU9mDD0bjfUyqFozp9vfDpR9iXsLKouh1ELS07BzsJ422ZPEUtKp3enyWJGTVxZfj95S7jX71Z9fNUbDIzpyZuMZ-tezYG5knqX8TXAorAeRcfbc0S080c6EZwOQUOg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/1_18pkDnzAldVA8mpnoiqm2OqeqjzZzIdC8JpUVNay4fIfGXdHgKsk4Pt5iAq7MQLO9jDprw6XMBurLlIGztup30ePRE38TpcV_KsChRiD93bXDjXw-phswd6yNRcdfj3xriFqj8nA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/nKqE9xbX0AK62iB_uHFc0T0GajRjRpnOCxdxb56TIkSlMq9uqSVbjsaNt1a3ZJfS_RwfPGhSkUfSmAzWvY7Wc_eHgutPwuf0KnfGKHPp_MnZFYMqDG8oGK9piXdQjyerPZ-L4f1OdQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/3tagCzu79FnaYhvxvIe4l3ZX0PwmXDukcCy83S-Hmvk_MMxQ878YNcWP-e76b67_8uOKpm2s0w5JYvRypcYo3M515YNloK3nf6GxzfmUb084GIro-Q70Kq0CkkhhfjnQ0D4Gf4v2qQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/-7SXlwkfU2cDaGESm1wu91EU-QbptY3jAEvrl2wR3B83hBTKQhdIMRWdRdeas1WYnrYsYL-LSJU6YrgauoV1BoyaKBGQM-BjXwwo0TAHtKYW1fhZaVR4X0OxOaPM6_rNIkhOJbHCwg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/iX1DhbjMCWHPxGg3S0-T7Y1Zej_qxK5XUb-jL9N1IcUBnjpCvzkPmkBGoPUxvPhUdbagnriZB3AULupVnZfZEYbFq7nTbxs2S5ndx32O-VKGFAAgpdQnLAUMNgx9yhnIRi7pvNZ9-A=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/_1XsrOK1-LWlxQANZiCBCbuMwrt1MA4wVNkgdX7iRPAycbe3rPsiD0XTBUj4SuxxD_O4OBN0boEmv62qLfoknq41XzH4goy-4J3u-a0wXJTE_jyPZ9i8AQzXSrKlHx1SGTd80QnX7g=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/adDAJ7bSBBr1y-KVZRYnQk68bt9fDqXX3wYluDu1BuU9Lc0bc1eZxMsJqBNqAjp79mCln0DkX47G8nIAExtoSv3k7oDnDsyvdSAsxBuOyAgEI-8gKAcJyWX2mj71CHuklbd-KBl-kQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/HsqYxq5JwMyfsM6qSRG_d3jxeJB2R_0gtUknAI0710NZ2NkJsKD4B35_bM_ep8SiMSU_wXhHJM32fNtUwQtxo3P_l1Hw-HKgE2gH6Dm8fsEaQqLDg4kAoevtdITU1AqlXU9FXGKtIw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/zvzeBE-YAnKuFAvJ0ZMU7DFOHJUiaOeqP5sYEMEjzHxPG11HJExae6svQLX8rBkl3d5s2596cfu43cM2M5nFLekreUssUemfpnfPJpu3W5zgE8me5zbkgWIq0_AzdxhQct0mJEcC2Q=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/pSlV06ZlN7EpIefSxNDTpaP9DvI2V7umbQVv3KfnYiKPbRY_KIbqZi766YMh2fUukIxZgpiFbt9J8wmE2pmcdyZxSCgI1f8ipefqfjwtLZJJCW2KP7VVEnKJtuFBwxyqZb5QdfeDNw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/HODVGMyTEnOp5h88BGylT8jfmSNPdD3VHxhGdUlJ7YahnYOZl6AyLkbNmEcpTK1AQMlXjmG8RnsgZdtDKxeBZCmdWeVhaFretlQRfgLwRbtN4rER7sny8IpEQRd1TdMI05EDCM6VTg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/OBWLR8gBMjwqBmlV0rHjDUX2G9HRErDAHFLgOkWH9WqRhxPtiPZkfMPPlXij0xKtDIA1WpsAYS1VC8WkaEIYHRiCwieucL_rtRJOyxoTWmGcbCL1Y-i4uGKU-PuNgo8-sru8MzMGSA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/4a8xfPPN651ArrmEWYtNDhTp-hEmNO4WDbM3V_ZzXZ-04Bv90kmf7hDA1qe8_QYCrpw1UXKmcoxB7qnEGxyjx9THv4dtAua019Rmhgv3h5pD2-cMa44sLN9qvSTzMLI-tc7Q6G_shA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/u61UmezFG8ntthfWtMNkCefVs5tVcVbkBbH1otBUOdDEtHKN_r0PKSMpNGMaJlaF2M_FLGHsF7sZXWIH850F1JNseNvGAcBgOOX1aH0i3ipKorTDnsPE7yUb8_-1BJKq2t9zqR7BWA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/Roqxv6sWTOFJUPvkKWY6OC0UYW-cYPdDZ4kaSBCj3RvTx477PdylvjqGCDa-vwevJzzBuQKRszkAaXIJZGUpHcihS2ie1akVR72Ga04uc6KGplisf2KoABjVz6E3UMfH0vditznzHQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/hOUQjcAjTrqFZq5s_xQo-GHmFwpHfr-i48Rpztb7CxBv4SxdNLdCKgs7zP6kudLJHiTYqpSgP7UP_gzRiYoP_HE_s8wsXAYJRMvjx8xHQZ5aYAZhQV1IgI0brl8rvXb2JBh8JQnZww=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/hcB7HhG4g21o0nec0wjyP6loh3Z0hz6rebRexUPmyOFW7cilwVJD7bIlk4ATTlf_RuuHCh6bMm6-0VxKNaObFr3niHjmkJx2gUU45JyqdQAEgZyoHl-1KSIugMBSFBXClTC3OUS27Q=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/Vtkmo3GTQAJ7vTlJwjNYoDowNCm3EexLhmifoQ_vq-QENbsvXwV9dfpjhPDrZs2PZoKD0oj9R-tAKpAgM5BgUW0SM3bolWnLpsh8X7-GoirKr4YPGgbF9eIq47wPZxL1M_V1Mn4c5g=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/9aAL0jcCz82w2b6JsIDh_ug0uEXGfrgcanF8t7IV-bF6WvQi8xdJdKKjS_zppfnfr6CdOFQpcVP55TEtsBDUj3oOJqJJhlxnqw703qg3kxlBAJEeGI5-dWoGayBqnvp_3abR0OccTw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/1xCvYfiC33G-jdrKILnVuv9ITlob6myMIUoxvRuK4G7YwgCgcqvf1gXKbwi6UXxHF3VBGtHZtw_23IfX-npwy-HQT21Qsde1fW0P3_kZbHDvzU-_URSyXSAZmQ8Y2cVWvAUNbEjUpw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/6D7S1SknRNGs0_tLzM9mptRPQSGfw6jBtHk_NSqAzhLY8XlCerwAgTms6zLrE-mKwYOb8avaGUzb0fIupjOZ6mX2RRa7T0J-gfs121yDWyhmJo12hlNJIlXmLZK-VCaWNhY1FQ2PKQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/DHM9aFhjtGkerweq10PH7J2BSDIqapapCyjkjJkEXRsNR8dvCZGEsjWpQM44jGYZEgY-puMySKRCT5k61pI-tMjoqPFceORohwU_m-h9JiVFPxjQJp4vcg6TuNIAvb2SavX59WGQMg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/FGeser9GqfBU8v7e_bg5nAxxA4VjfPg_y_kDfsS7buZe-mcR1jOnmz-8p6elhY7eFyfzqYjzdShHYd4noIkUf5vbBhxb5E7VrHCyY9EEkdPlM7xNxmCGbH3c_yLXLXr5mDt1KKUIeg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/GkQF415PX9A8cRbooymtGG0q3R2TMQxYf9cp_aKMevrIrmBz7hhGG6oRCDWi8silg54oHeXdUMOUeI0bjOvnYPW07z7AMpuZ4rhk0QOUW5aXKUC6yN1tAVc0uZoDzpQhO0DXFsOcEw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/dk5DKmyAEwpTL-hTyPlrC6aOFvYxVCH5HgHLw8h5XuRPVyq-rK9EwZwr6_hXvAvGjjf5SV_Acy2ngXrqn7CJKWHj5UJy7oo4kspK01E_IKPKnBKyzuxof3HHYQ3suW5LrImVK-yHKw=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/PG1VrjZ-x0hkkdUratoN7b12CFuojAnB6_SQutkeBqIIK_W9nXfVyYFn6ciJIFLHRx6YG73FEzEzU8AY64CT-jfYI9Sg6OEBuEtVz2tkvbAUIG2DnT38UlAxmwRfcvRI7r6ah0_SWQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/-I4XofJlRedwOnpW20ZPWGmq0f0msQLwukMkH1XfrDS9MBeNxRIq7khizjhtzMyUziAFfTY7oHyQodwarxoQodtaO3IsC9tfpdq4LnSnya-s3oRyHjRxN4OY2ka-T8cuv32PdsT7CA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/zfQNPjc5HFP7KBxDODtsqK2b-ZT4Tkg60J6YMWMLa4HwVsBplP6W88hYxf0iEkvizn7GAt2ptZ70Elj3awjNZ5XdrcZyu5Qq2T0-fUNHNnQHpJOuNpiLLW8VCEmi5aU44gZD4ENFEQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/ui-fHiOvCNCcc5cDnzvOFcVgblGlUsgtyoN6moXfIo6zvADfZY0dpqkh9oWQSJc9DSHm3ZPSGBdIrC0SEg1GEgBtgH5ec3hTPR_23GpNQju7HsUR44bQqnI1ppLU2zCWD62e_sYjLQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/t_HKNsz4xk4orrEHvmVxt1RZeJBxy9EE4vfSFenm5vqqCgZviCJrYVJF9yi8hB50OcKCCasOn6lCIztsr6dDnlwf4L6hVIR1Gd7yPrfj33bVf4t4kOnjF1oN0KcV1S5mbQrZxCMDqQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/Woyx892-v9XDwG5IOEYM1QfE-e-BruMP2fdkjjtNZ3MdybVQ_lJTE_1jo7wV8aeclvmGhuZ7fOEdLxEABIyufbkwio09D0nnvFS9DwpPRMQb1nqdEfRWL568SALlMhjxBN_LpgU6gA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/cmF25D7zVN3Nb03lo9cD_VH8NGlJ3VgZ2xc7IHPJ9HEax0IgHORdhe6eEKaUofzhbPsh_pG2jZcYPLTV_ndYybBnnkWaD8NdSrX0smoinmZp9KWEs3Sw2pbEhFASiJ8AOOQrLTbFWQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/v7lJgOBFtCGhA98Q-wJ9LxLWJQBz94e63zqIFyPNw9f-at7LzYujeDf8omRwcjmeAprQL0C8lKw3fA0tc8ORGEHCbHAyC8vlUKzCimKLQr_iHIIEZhl_9-ybvO3apZTzxDd-RX6Mlg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/VKPTtlxaJCaMPc3ry0eTloZtM4iIAW7TJDwaTobzM0NLU0_box39_QN117lr2BnuYkyuqZyywfph_IKOj0Mgxf40_gnLH8CbnOG4m1sLN6C8pOF0jvEC8xX2nVVfNUvibVJSb-GsJQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/639bOF-6fYWQgu0yeFzfmJ7I7YK8FZUvOBQJRKR4ZZCJVTJXzXUICrvtXloPoKBrdHX9k-UbJrXNabDXyI1UET8-diTflzqJUkO1K9SjYlbhrAzckI_XPcv9wBgEEdbsXlXUZyPoVA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/kfgoYzjUWotG-j9CWDOCsih-6vpfQ5sm-pKpTbhhQW5R4jfwJOE4tsMtrglEd6cf9nVH9QCKv9IBqci2eqNqHG2yXedoSSMe3X4WRlgDyZbEqXJoeXWV7QzsR_K4LmZCX-bVjDQrjA=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/F_fbil7HiG8Qgh5QP6KkC6212ezKNDylg04vo5dg04exN064UbhOaNkSWoNA1cR0JEXSju4QNpEhJ2I6my5qavUv-HUzaZpa_GZ7XL7mPHCGUUOlbPgGRreqy7lMQCA8iGSYBDKGWg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/tf-FUb2rWYI4qGBFEPPiGJ90Lhca_kWxgYgW60rbZWUJRdjO5gpzgMi01tLH2e2WQHbBO68CHUAstranSSXd4alcP5IzpBLRxqorXps6MRWqYu4yO2ovf5kg5Ay9DLa8NIZAolMddg=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/5Q5OuZ5D0yA0oN4zMk2Cn2Lc3z21ogeR_o7YdgYiCcNWl6wxyD_4O6uaG8eX1Ow08587KyFi9C3V-H-x8WdJk35xVq-gR4yewWpStPf9-geM479TZzEk2Y1Y0rapBz349GKXUFatig=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
  &lt;img data-src=&quot;https://lh3.googleusercontent.com/q1zlHjiddkf9S0IU4zGPOJ3yVjTErMTARmIzHWP2hIPjH_kVD1VFJr7RkqBcp89oYrdLYibiitFAumFNFANuFq-GpBZLQFvsExaAeIYLpYPiCRzxdE8eWlnPiKJx7OXXxcumwMJVQQ=w1920-h1080&quot; src=&quot;&quot; alt=&quot;&quot; /&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">A little over a year ago, I studied abroad in Cape Town, South Africa. I thought some of the photos I took were pretty groovy, so I’m embedding them here as well.</summary></entry><entry><title type="html">The (NP Complete) Concave Hull</title><link href="http://localhost:4000/concave-np-complete/" rel="alternate" type="text/html" title="The (NP Complete) Concave Hull" /><published>2019-06-28T00:00:00-04:00</published><updated>2019-06-28T00:00:00-04:00</updated><id>http://localhost:4000/concave-np-complete</id><content type="html" xml:base="http://localhost:4000/concave-np-complete/">&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Simple_polygon.svg/300px-Simple_polygon.svg.png&quot; alt=&quot;from Wikipedia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my recent research, I’ve stumbled across the fascinating topic of hulls. For simplicity, we can define a hull to be an n-sided polygon that encloses all points p ∈ S, a set of k points. The most common type of hull is a convex hull, which is the smallest convex polygon that contains S, in contrast to the more rarely seen concave hull, which we can define to be the smallest polygon that encloses S. The difference between the two is, of course, that a convex hull is constrained to be an actually convex shape, whereas the concave hull has no such restriction.&lt;/p&gt;

&lt;h1 id=&quot;why-use-a-hull&quot;&gt;Why use a hull?&lt;/h1&gt;
&lt;p&gt;There’s actually a ton of interesting applications of hulls. One particularity novel use is described in &lt;a href=&quot;ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#links&quot;&gt;this&lt;/a&gt; cool blog post, which uses an alpha shape approximation to find contours of places from geotagged data. Another common use of a hull is to postprocess the result of a clustering algorithm, such as k-means or DBSCAN. This is the application I was originally concerned with.&lt;/p&gt;

&lt;h1 id=&quot;what-kind-of-hull&quot;&gt;What kind of hull?&lt;/h1&gt;
&lt;p&gt;The easiest type of hull to use is the convex hull. There’s several Python implementations of the convex hull, included in projects like &lt;a href=&quot;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjPt-3p4o3jAhWVQs0KHfG3Bj0QFjAAegQIBBAB&amp;amp;url=https%3A%2F%2Fdocs.scipy.org%2Fdoc%2Fscipy%2Freference%2Fgenerated%2Fscipy.spatial.ConvexHull.html&amp;amp;usg=AOvVaw2xCnhbutY0EXwZIA8vYy14&quot;&gt;scipy&lt;/a&gt;, &lt;a href=&quot;https://docs.opencv.org/3.4/d3/dc0/group__imgproc__shape.html#ga014b28e56cb8854c0de4a211cb2be656&quot;&gt;OpenCV&lt;/a&gt;, and &lt;a href=&quot;https://shapely.readthedocs.io/en/stable/manual.html&quot;&gt;Shapely&lt;/a&gt;. The convex hull is quite intuitive, conceptually. Let’s dive into some code.&lt;/p&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js&quot;&gt;&lt;/script&gt;

&lt;pre class=&quot;prettyprint lang-py&quot;&gt;
&lt;code&gt;
import matplotlib.pyplot as plt
from sklearn.datasets.samples_generator import make_blobs
from scipy.spatial import ConvexHull

X, y = make_blobs(n_samples=100, centers=1, n_features=2, random_state=0)

hull = ConvexHull(X)

for simplex in hull.simplices:
    plt.plot(X[simplex, 0], X[simplex, 1], 'k-', color = 'red')

plt.scatter(*zip(*X), marker = '.', color = 'black')
plt.show()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/convex.png&quot; width=&quot;500&quot; /&gt;
&lt;!---*** for fucking color change in the syntax lol---&gt;&lt;/p&gt;

&lt;p&gt;Cool, that was easy! We’ve succesfully associated some sort of area with these points, which we can find with various methods. Scipy in particular has already done this for us, so there’s no need to do it explicitly. Mathematically, a common method is through &lt;a href=&quot;https://en.wikipedia.org/wiki/Green%27s_theorem&quot;&gt;Green’s Theorem&lt;/a&gt;, which you might remember from vector calculus.&lt;/p&gt;

&lt;h1 id=&quot;so-whats-the-problem-here&quot;&gt;So what’s the problem here?&lt;/h1&gt;
&lt;p&gt;The problem is that it a convex hull can be a (surprise!) bad approximation for a concave shape. Ideally, a concave hull would look more like the blue line:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/concave_and_convex.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is clearly much more accurate, although still an approximation. But how do we get here?&lt;/p&gt;

&lt;h1 id=&quot;whats-the-deal-with-concave-hulls&quot;&gt;What’s the deal with concave hulls?&lt;/h1&gt;
&lt;p&gt;Unfortunately for us, it ain’t as easy as the convex hull. None of the previously mentioned libraries have a built-in function for the concave hull, and for good reason. The problem is that finding a perfect concave hull is actually &lt;a href=&quot;https://en.wikipedia.org/wiki/NP-completeness&quot;&gt;NP-complete&lt;/a&gt;. If you’re not familiar with the notion of NP-completeness, it essentially means that the problem is incredibly difficult to solve (Non Polynomial time!) and (the cool part) if we solve one NP-complete problem, we’ve solved them all!&lt;/p&gt;

&lt;h1 id=&quot;np-complete&quot;&gt;NP-Complete?&lt;/h1&gt;
&lt;p&gt;The process of determining if a problem is actually NP-complete is termed a reduction; that is, we mean to transform the problem into something else that we know is NP-complete. Therefore, every problem in the class is merely a rephrasing of the rest. In this case, we can fairly trivially show that finding a concave hull reduces to a problem called the “min-area traveling salesperson”.&lt;/p&gt;

&lt;p&gt;The traveling salesperson problem is fairly simple to describe. From &lt;a href=&quot;https://en.wikipedia.org/wiki/Travelling_salesman_problem&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city and returns to the origin city?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can visualize this graphically like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/salesman.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That looks like something we recognize! We’ve actually enclosed the minimal area, which was what we defined a concave hull to be earlier. Although our visual intuition is enough for the purposes of this blog post, you can find a more formal proof in papers by &lt;a href=&quot;https://arxiv.org/pdf/1309.7829.pdf&quot;&gt;Fekete et al.&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/pdf/1309.7829.pdf&quot;&gt;Asaeedi et al.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a side note, for those of you who know quite a bit about complexity theory (and before I get emails to correct me), the traveling salesman problem is actually NP-hard, rather then NP-complete because it’s not technically a decision problem. However, the min-area traveling salesman is, as we can reduce it to finding a Hamiltonian cycle in a planar digraph, which is NP-complete as shown by &lt;a href=&quot;https://www.cs.princeton.edu/courses/archive/spring04/cos423/handouts/the%20planar%20hamiltonian.pdf&quot;&gt;Garey et al&lt;/a&gt;.. If I’ve still got this wrong, please let me know!&lt;/p&gt;

&lt;p&gt;Back to the matter at hand: there’s not really an easily available package for concave hulls because it’s actually hard to compute one.&lt;/p&gt;

&lt;h1 id=&quot;so-now-what&quot;&gt;So now what?&lt;/h1&gt;
&lt;p&gt;Now we delve into the world of approximations. Fortunately for us, some really smart people has already thought about this in numerous blog posts. I particularity like &lt;a href=&quot;https://sgillies.net/2012/10/13/the-fading-shape-of-alpha.html&quot;&gt;this one&lt;/a&gt; by Sean Gillies, who wrote Shapely/fiona and &lt;a href=&quot;http://blog.thehumangeo.com/2014/05/12/drawing-boundaries-in-python/&quot;&gt;this post&lt;/a&gt; by Kevin Dwyer, who expanded on Sean’s ideas and gave a really nice explanation.&lt;/p&gt;

&lt;p&gt;As both of those posts provide excellent explanation, I won’t repeat it here. However, I have taken the liberty of creating a small class based on Sean’s and Kevin’s work for my own personal use to streamline the process the bit (and generate the figure with the concave approximation above!) You can &lt;a href=&quot;https://gist.github.com/bp0017/bf7e548a04f133d53ebac41f3e2b8ad7&quot;&gt;find it on my GitHub&lt;/a&gt; if you want to play around with it a bit.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">OpenCV Nonfree Modules</title><link href="http://localhost:4000/opencv-config/" rel="alternate" type="text/html" title="OpenCV Nonfree Modules" /><published>2019-06-04T00:00:00-04:00</published><updated>2019-06-04T00:00:00-04:00</updated><id>http://localhost:4000/opencv-config</id><content type="html" xml:base="http://localhost:4000/opencv-config/">&lt;p&gt;&lt;img src=&quot;../images/opencv_logo.png&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In computer vision applications, it’s common to encounter a scenario where feature extraction/matching would be useful.
There are two quite well-known algorithms for this purpose, SIFT and SURF. Although these are not the only options,
they are robust and tested on a variety of data sets.&lt;/p&gt;

&lt;h1 id=&quot;what-are-siftsurf&quot;&gt;What are SIFT/SURF?&lt;/h1&gt;
&lt;p&gt;SIFT (Scale Invariant Feature Transform) was patented in 1999 by David Lowe. In general, the algorithm uses filtering techniques
to extract keypoints of an image, and a set of descriptors to go along with the keypoints. SURF (Speeded Up Robust Features) is a modified version designed for greater speed. A common application of SIFT/SURF is in object recognition.&lt;/p&gt;

&lt;h1 id=&quot;where-can-i-find-implementations&quot;&gt;Where can I find implementations?&lt;/h1&gt;
&lt;p&gt;Unfortunately for us, the most popular Python computer vision library, OpenCV, doesnt support SIFT and SURF from the default install, which most users get through &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;. This is because SIFT and SURF are patented, and you’re supposed to pay the authors for use. Thus, OpenCV has segregated them in order to make this clear. However, from as user’s standpoint, this creates some difficulty.&lt;/p&gt;

&lt;h1 id=&quot;how-can-i-configure-opencv&quot;&gt;How can I configure OpenCV?&lt;/h1&gt;
&lt;p&gt;There’s two seperate methods to this end. The first, and more difficult, is to recompile OpenCV from source in order to enable a certain flag (&lt;code class=&quot;highlighter-rouge&quot;&gt;OPENCV_ENABLE_NONFREE&lt;/code&gt;) when building with &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;. This method is well documented &lt;a href=&quot;https://www.pyimagesearch.com/2018/05/28/ubuntu-18-04-how-to-install-opencv/&quot;&gt;here&lt;/a&gt;. This alters the default OpenCV install, which is fine if you’re the only user, but generally frowned upon in a multiuser environment. The preferred method is again using &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;, but with some modifications.&lt;/p&gt;

&lt;p&gt;As a general rule, it’s best practice to use &lt;a href=&quot;https://docs.python.org/3/tutorial/venv.html&quot;&gt;virtual enviroments&lt;/a&gt;. You can create a virtual enviroment with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
virtualenv name_of_your_environment
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If virtualenv is not installed, you can do that with &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install virtualenv&lt;/code&gt;.
To activate it, all you have to do is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
source name_of_your_environment/bin/activate
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The advantage of using virtual environments is so you can isolate packages. We use them here as we want to install a previous version of OpenCV. Why do this? After OpenCV Version 3.4.2.16, the OpenCV devs removed the option to install SIFT/SURF using &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;, which would force us to go the recompilation route. As such, we need to install a previous version of OpenCV before this capability was removed. We can do this as normal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
pip install opencv-python==3.4.2.16
pip install opencv-contrib-python==3.4.2.16
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Then, you’re all set! Let’s do a quick object matching test.
Let’s use this cat that was the first thing that came up when I Googled “cat”.
We are going use SIFT to match the original image with a rotated, blurred, and cropped version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/cat1.jpg&quot; width=&quot;250&quot; /&gt; &lt;img src=&quot;../images/cat2.jpg&quot; width=&quot;250&quot; /&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-py&quot;&gt;
&lt;code&gt;
import cv2 #import our library
import matplotlib.pyplot as plt #for plotting

cat = cv2.imread('cat1.jpg') #read images
cat_rotated = cv2.imread('cat2.jpg')

sift = cv2.xfeatures2d.SIFT_create() #create our SIFT detector

keypoints_1, descriptors_1 = sift.detectAndCompute(cat,None) #find our keypoints and descriptors
keypoints_2, descriptors_2 = sift.detectAndCompute(cat_rotated,None)


bf_matcher = cv2.BFMatcher(cv2.NORM_L1, crossCheck=False) #create our keypoint matcher

matched_descriptors = bf_matcher.match(descriptors_1,descriptors_2) #match descriptors

matches = sorted(matched_descriptors, key = lambda x:x.distance) #sort by distance to get more relevant matches
out =  cv2.drawMatches(cat,keypoints_1,cat_rotated,keypoints_2,matches[:40],None, flags=2)
plt.imshow(out)
plt.show()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;../images/matches.png&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We appear to have a good match.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Pretty Printing of .csv’s in the terminal</title><link href="http://localhost:4000/prettyprint-csv/" rel="alternate" type="text/html" title="Pretty Printing of .csv's in the terminal" /><published>2019-06-04T00:00:00-04:00</published><updated>2019-06-04T00:00:00-04:00</updated><id>http://localhost:4000/prettyprint-csv</id><content type="html" xml:base="http://localhost:4000/prettyprint-csv/">&lt;p&gt;I spend much of my time ssh’ed into a remote machine (my school’s high performance computing cluster) and often come across .csv files that I’d like to view. &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;, although fast, does not handle .csv’s in any special way, and if the .csv is not short and simple, can result in unintelligible output. I was recently diving through my organization’s .bashrc and found this handy script.
&lt;script src=&quot;https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
function pcsv() {

cat $1 | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S

}
&lt;/pre&gt;

&lt;p&gt;which results in some pretty nicely formatted output.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;../images/pcsv_demo.gif&quot; /&gt;
&lt;figcaption&gt; from the Iris dataset &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Thanks to whichever fed up grad student that wrote this.&lt;/p&gt;</content><author><name></name></author><summary type="html">I spend much of my time ssh’ed into a remote machine (my school’s high performance computing cluster) and often come across .csv files that I’d like to view. cat, although fast, does not handle .csv’s in any special way, and if the .csv is not short and simple, can result in unintelligible output. I was recently diving through my organization’s .bashrc and found this handy script. function pcsv() {</summary></entry><entry><title type="html">A Test Post</title><link href="http://localhost:4000/Hello-World/" rel="alternate" type="text/html" title="A Test Post" /><published>2014-03-03T00:00:00-05:00</published><updated>2014-03-03T00:00:00-05:00</updated><id>http://localhost:4000/Hello-World</id><content type="html" xml:base="http://localhost:4000/Hello-World/">&lt;p&gt;First post! This is a test!&lt;/p&gt;</content><author><name></name></author><summary type="html">First post! This is a test!</summary></entry></feed>